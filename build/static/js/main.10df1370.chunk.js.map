{"version":3,"sources":["components/layout/Header.js","components/TodoItems.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","Header","style","to","TodoItems","getStyle","borderBottom","textDecoration","props","todo","completed","this","id","title","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","setState","target","name","value","on","display","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","filter","addTodo","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10df1370.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link to=\"/\" style={linkStyle}>Home</Link> |\r\n            <Link to=\"/about\" style={linkStyle}>About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\n\r\nconst linkStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItems extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ?\r\n            'line-through' : 'none'\r\n        }\r\n    }\r\n    \r\n    \r\n    render() {\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind\r\n                    (this,id)} /> {' '}\r\n                    { title }\r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this,id)}>X</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nTodoItems.propTypes = {\r\n    todos: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 7px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n\r\n}\r\nexport default TodoItems\r\n","import React, { Component } from 'react';\r\nimport TodoItems from './TodoItems';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nclass Todos extends Component {\r\n\r\n \r\n\r\n  render() {\r\n      \r\n    return this.props.todos.map((todo) =>(\r\n    <TodoItems key={todo.id} todo={todo} markComplete={this.props.markComplete}\r\n    delTodo = {this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\n//PropTypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react'\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.AddTodo(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value }); \r\n    render() {\r\n        return (\r\n            <form on onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n                <input \r\n                type =\"text\"\r\n                name=\"title\"\r\n                style={{ flex: '10', padding: '5px'}}\r\n                placeholder=\"Add Todo...\"\r\n                value= {this.state.title}\r\n                onChange={this.onChange}\r\n                />\r\n                <input \r\n                type=\"submit\" \r\n                value=\"Submit\"\r\n                className=\"btn\"\r\n                style={{flex: '1'}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is TodoList app v1.0.0</p>\r\n        </React.Fragment>\r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\n//import uuid from 'react-uuid';\nimport axios from 'axios';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos')\n    .then(res => this.setState({ todos: res.data }))\n  }\n\n\n  // Toggel Complete\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo => {\n      if(todo.id === id ) {\n        todo.completed = !todo.completed\n      }\n      return todo;\n\n\n    }) });\n  }\n  //Delete to do\n  delTodo = (id) => {\n  axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n  .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] }) );\n  \n  }\n\n  //Add Todo\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false\n    })\n    .then(res => this.setState({ todos:\n       [...this.state.todos, res.data] }) );\n    \n  }\n\n\n  render() {\n    \n    return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"Container\">\n        <h1>App Shukla</h1>\n        <Header/>\n        <Route exact path=\"/\" render={props => (\n          <React.Fragment>\n            <AddTodo AddTodo={this.addTodo}/>\n        <Todos todos={this.state.todos} markComplete={this.markComplete}\n        delTodo = {this.delTodo}/>\n          </React.Fragment>\n        ) } />\n\n        <Route path=\"/about\" component={About} />\n        </div>\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}